// Users
  app.get('/users', (req, res) => {
    const query = {
      text: 'SELECT * FROM users',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching users' });
      } else {
        res.send(result.rows);
      }
    });
  });

  app.get('/users/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM users WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'User not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.post('/users', (req, res) => {
    const { username, password, role } = req.body;
    const query = {
      text: `INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING *`,
      values: [username, password, role],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating user' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.put('/users/:id', (req, res) => {
    const id = req.params.id;
    const { username, password, role } = req.body;
    const query = {
      text: `UPDATE users SET username = $1, password = $2, role = $3 WHERE id = $4 RETURNING *`,
      values: [username, password, role, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating user' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.delete('/users/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM users WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting user' });
      } else {
        res.send({ message: 'User deleted successfully' });
      }
    });
  });

// Member Profiles
  app.get('/member-profiles', (req, res) => {
    const query = {
      text: 'SELECT * FROM member_profiles',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching member profiles' });
      } else {
        res.send(result.rows);
      }
    });
  });

  app.get('/member-profiles/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM member_profiles WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Member profile not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.post('/member-profiles', (req, res) => {
    const { user_id, name, email, phone, address } = req.body;
    const query = {
      text: `INSERT INTO member_profiles (user_id, name, email, phone, address) VALUES ($1, $2, $3, $4, $5) RETURNING *`,
      values: [user_id, name, email, phone, address],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating member profile' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.put('/member-profiles/:id', (req, res) => {
    const id = req.params.id;
    const { user_id, name, email, phone, address } = req.body;
    const query = {
      text: `UPDATE member_profiles SET user_id = $1, name = $2, email = $3, phone = $4, address = $5 WHERE id = $6 RETURNING *`,
      values: [user_id, name, email, phone, address, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating member profile' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.delete('/member-profiles/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM member_profiles WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting member profile' });
      } else {
        res.send({ message: 'Member profile deleted successfully' });
      }
    });
  });

// Meeting Schedules
  app.get('/meeting-schedules', (req, res) => {
    const query = {
      text: 'SELECT * FROM meeting_schedules',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching meeting schedules' });
      } else {
        res.send(result.rows);
      }
    });
  });

  app.get('/meeting-schedules/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM meeting_schedules WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Meeting schedule not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.post('/meeting-schedules', (req, res) => {
    const { title, description, start_date, end_date, start_time, end_time } = req.body;
    const query = {
      text: `INSERT INTO meeting_schedules (title, description, start_date, end_date, start_time, end_time) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
      values: [title, description, start_date, end_date, start_time, end_time],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating meeting schedule' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.put('/meeting-schedules/:id', (req, res) => {
    const id = req.params.id;
    const { title, description, start_date, end_date, start_time, end_time } = req.body;
    const query = {
      text: `UPDATE meeting_schedules SET title = $1, description = $2, start_date = $3, end_date = $4, start_time = $5, end_time = $6 WHERE id = $7 RETURNING *`,
      values: [title, description, start_date, end_date, start_time, end_time, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating meeting schedule' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.delete('/meeting-schedules/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM meeting_schedules WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting meeting schedule' });
      } else {
        res.send({ message: 'Meeting schedule deleted successfully' });
      }
    });
  });

  // Meeting Agenda
    app.get('/meeting-agenda', (req, res) => {
      const query = {
        text: 'SELECT * FROM meeting_agenda',
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error fetching meeting agenda' });
        } else {
          res.send(result.rows);
        }
      });
    });

    app.get('/meeting-agenda/:id', (req, res) => {
      const id = req.params.id;
      const query = {
        text: 'SELECT * FROM meeting_agenda WHERE id = $1',
        values: [id],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(404).send({ message: 'Meeting agenda not found' });
        } else {
          res.send(result.rows[0]);
        }
      });
    });
    
    app.post('/meeting-agenda', (req, res) => {
      const { meeting_schedule_id, title, description } = req.body;
      const query = {
        text: `INSERT INTO meeting_agenda (meeting_schedule_id, title, description) VALUES ($1, $2, $3) RETURNING *`,
        values: [meeting_schedule_id, title, description],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error creating meeting agenda' });
        } else {
          res.send(result.rows[0]);
        }
      });
    });
    
    app.put('/meeting-agenda/:id', (req, res) => {
      const id = req.params.id;
      const { meeting_schedule_id, title, description } = req.body;
      const query = {
        text: `UPDATE meeting_agenda SET meeting_schedule_id = $1, title = $2, description = $3 WHERE id = $4 RETURNING *`,
        values: [meeting_schedule_id, title, description, id],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error updating meeting agenda' });
        } else {
          res.send(result.rows[0]);
        }
      });
    });
    
    app.delete('/meeting-agenda/:id', (req, res) => {
      const id = req.params.id;
      const query = {
        text: 'DELETE FROM meeting_agenda WHERE id = $1',
        values: [id],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error deleting meeting agenda' });
        } else {
          res.send({ message: 'Meeting agenda deleted successfully' });
        }
      });
    });
    
    // Meeting Notes
    app.get('/meeting-notes', (req, res) => {
      const query = {
        text: 'SELECT * FROM meeting_notes',
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error fetching meeting notes' });
        } else {
          res.send(result.rows);
        }
      });
    });
    
    app.get('/meeting-notes/:id', (req, res) => {
      const id = req.params.id;
      const query = {
        text: 'SELECT * FROM meeting_notes WHERE id = $1',
        values: [id],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(404).send({ message: 'Meeting notes not found' });
        } else {
          res.send(result.rows[0]);
        }
      });
    });
    
    app.post('/meeting-notes', (req, res) => {
      const { meeting_schedule_id, note } = req.body;
      const query = {
        text: `INSERT INTO meeting_notes (meeting_schedule_id, note) VALUES ($1, $2) RETURNING *`,
        values: [meeting_schedule_id, note],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error creating meeting notes' });
        } else {
          res.send(result.rows[0]);
        }
      });
    });

    app.put('/meeting-notes/:id', (req, res) => {
      const id = req.params.id;
      const { meeting_schedule_id, note } = req.body;
      const query = {
        text: `UPDATE meeting_notes SET meeting_schedule_id = $1, note = $2 WHERE id = $3 RETURNING *`,
        values: [meeting_schedule_id, note, id],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error updating meeting notes' });
        } else {
          res.send(result.rows[0]);
        }
      });
    });

    app.delete('/meeting-notes/:id', (req, res) => {
      const id = req.params.id;
      const query = {
        text: 'DELETE FROM meeting_notes WHERE id = $1',
        values: [id],
      };
      pool.query(query, (err, result) => {
        if (err) {
          console.error(err);
          res.status(500).send({ message: 'Error deleting meeting notes' });
        } else {
          res.send({ message: 'Meeting notes deleted successfully' });
        }
      });
    });

// Meeting Note Images
  app.get('/meeting-note-images', (req, res) => {
    const query = {
      text: 'SELECT * FROM meeting_note_images',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching meeting note images' });
      } else {
        res.send(result.rows);
      }
    });
  });

  app.get('/meeting-note-images/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM meeting_note_images WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Meeting note image not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.post('/meeting-note-images', (req, res) => {
    const { meeting_note_id, image_url, image_description } = req.body;
    const query = {
      text: `INSERT INTO meeting_note_images (meeting_note_id, image_url, image_description) VALUES ($1, $2, $3) RETURNING *`,
      values: [meeting_note_id, image_url, image_description],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating meeting note image' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.put('/meeting-note-images/:id', (req, res) => {
    const id = req.params.id;
    const { meeting_note_id, image_url, image_description } = req.body;
    const query = {
      text: `UPDATE meeting_note_images SET meeting_note_id = $1, image_url = $2, image_description = $3 WHERE id = $4 RETURNING *`,
      values: [meeting_note_id, image_url, image_description, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating meeting note image' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.delete('/meeting-note-images/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM meeting_note_images WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting meeting note image' });
      } else {
        res.send({ message: 'Meeting note image deleted successfully' });
      }
    });
  });

// Attendances
  app.get('/attendances', (req, res) => {
    const query = {
      text: 'SELECT * FROM attendances',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching attendances' });
      } else {
        res.send(result.rows);
      }
    });
  });

  app.get('/attendances/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM attendances WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Attendance not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.post('/attendances', (req, res) => {
    const { user_id, meeting_schedule_id, status, note } = req.body;
    const query = {
      text: `INSERT INTO attendances (user_id, meeting_schedule_id, status, note) VALUES ($1, $2, $3, $4) RETURNING *`,
      values: [user_id, meeting_schedule_id, status, note],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating attendance' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.put('/attendances/:id', (req, res) => {
    const id = req.params.id;
    const { user_id, meeting_schedule_id, status, note } = req.body;
    const query = {
      text: `UPDATE attendances SET user_id = $1, meeting_schedule_id = $2, status = $3, note = $4 WHERE id = $5 RETURNING *`,
      values: [user_id, meeting_schedule_id, status, note, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating attendance' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.delete('/attendances/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM attendances WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting attendance' });
      } else {
        res.send({ message: 'Attendance deleted successfully' });
      }
    });
  });
  
// Absence Requests
  app.get('/absence-requests', (req, res) => {
    const query = {
      text: 'SELECT * FROM absence_requests',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching absence requests' });
      } else {
        res.send(result.rows);
      }
    });
  });
  
  app.get('/absence-requests/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM absence_requests WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Absence request not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.post('/absence-requests', (req, res) => {
    const { user_id, meeting_schedule_id, reason, status } = req.body;
    const query = {
      text: `INSERT INTO absence_requests (user_id, meeting_schedule_id, reason, status) VALUES ($1, $2, $3, $4) RETURNING *`,
      values: [user_id, meeting_schedule_id, reason, status],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating absence request' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.put('/absence-requests/:id', (req, res) => {
    const id = req.params.id;
    const { user_id, meeting_schedule_id, reason, status } = req.body;
    const query = {
      text: `UPDATE absence_requests SET user_id = $1, meeting_schedule_id = $2, reason = $3, status = $4 WHERE id = $5 RETURNING *`,
      values: [user_id, meeting_schedule_id, reason, status, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating absence request' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.delete('/absence-requests/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM absence_requests WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting absence request' });
      } else {
        res.send({ message: 'Absence request deleted successfully' });
      }
    });
  });
  
  // Voting Topics
  app.get('/voting-topics', (req, res) => {
    const query = {
      text: 'SELECT * FROM voting_topics',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching voting topics' });
      } else {
        res.send(result.rows);
      }
    });
  });
  
  app.get('/voting-topics/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM voting_topics WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Voting topic not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.post('/voting-topics', (req, res) => {
    const { title, description } = req.body;
    const query = {
      text: `INSERT INTO voting_topics (title, description) VALUES ($1, $2) RETURNING *`,
      values: [title, description],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating voting topic' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.put('/voting-topics/:id', (req, res) => {
    const id = req.params.id;
    const { title, description } = req.body;
    const query = {
      text: `UPDATE voting_topics SET title = $1, description = $2 WHERE id = $3 RETURNING *`,
      values: [title, description, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating voting topic' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.delete('/voting-topics/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM voting_topics WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting voting topic' });
      } else {
        res.send({ message: 'Voting topic deleted successfully' });
      }
    });
  });
  
  // Voting Options
  app.get('/voting-options', (req, res) => {
    const query = {
      text: 'SELECT * FROM voting_options',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching voting options' });
      } else {
        res.send(result.rows);
      }
    });
  });
  
  app.get('/voting-options/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM voting_options WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Voting option not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.post('/voting-options', (req, res) => {
    const { voting_topic_id, option } = req.body;
    const query = {
      text: `INSERT INTO voting_options (voting_topic_id, option) VALUES ($1, $2) RETURNING *`,
      values: [voting_topic_id, option],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating voting option' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.put('/voting-options/:id', (req, res) => {
    const id = req.params.id;
    const { voting_topic_id, option } = req.body;
    const query = {
      text: `UPDATE voting_options SET voting_topic_id = $1, option = $2 WHERE id = $3 RETURNING *`,
      values: [voting_topic_id, option, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating voting option' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });

  app.delete('/voting-options/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM voting_options WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting voting option' });
      } else {
        res.send({ message: 'Voting option deleted successfully' });
      }
    });
  });
  
  // Votes
  app.get('/votes', (req, res) => {
    const query = {
      text: 'SELECT * FROM votes',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching votes' });
      } else {
        res.send(result.rows);
      }
    });
  });
  
  app.get('/votes/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM votes WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Vote not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.post('/votes', (req, res) => {
    const { user_id, voting_topic_id, option_id } = req.body;
    const query = {
      text: `INSERT INTO votes (user_id, voting_topic_id, option_id) VALUES ($1, $2, $3) RETURNING *`,
      values: [user_id, voting_topic_id, option_id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating vote' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.put('/votes/:id', (req, res) => {
    const id = req.params.id;
    const { user_id, voting_topic_id, option_id } = req.body;
    const query = {
      text: `UPDATE votes SET user_id = $1, voting_topic_id = $2, option_id = $3 WHERE id = $4 RETURNING *`,
      values: [user_id, voting_topic_id, option_id, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating vote' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.delete('/votes/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM votes WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting vote' });
      } else {
        res.send({ message: 'Vote deleted successfully' });
      }
    });
  });
  
  // Vote Results
  app.get('/vote-results', (req, res) => {
    const query = {
      text: 'SELECT * FROM vote_results',
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error fetching vote results' });
      } else {
        res.send(result.rows);
      }
    });
  });
  
  app.get('/vote-results/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'SELECT * FROM vote_results WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(404).send({ message: 'Vote result not found' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.post('/vote-results', (req, res) => {
    const { voting_topic_id, option_id, count, percentage } = req.body;
    const query = {
      text: `INSERT INTO vote_results (voting_topic_id, option_id, count, percentage) VALUES ($1, $2, $3, $4) RETURNING *`,
      values: [voting_topic_id, option_id, count, percentage],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error creating vote result' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.put('/vote-results/:id', (req, res) => {
    const id = req.params.id;
    const { voting_topic_id, option_id, count, percentage } = req.body;
    const query = {
      text: `UPDATE vote_results SET voting_topic_id = $1, option_id = $2, count = $3, percentage = $4 WHERE id = $5 RETURNING *`,
      values: [voting_topic_id, option_id, count, percentage, id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error updating vote result' });
      } else {
        res.send(result.rows[0]);
      }
    });
  });
  
  app.delete('/vote-results/:id', (req, res) => {
    const id = req.params.id;
    const query = {
      text: 'DELETE FROM vote_results WHERE id = $1',
      values: [id],
    };
    pool.query(query, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).send({ message: 'Error deleting vote result' });
      } else {
        res.send({ message: 'Vote result deleted successfully' });
      }
    });
  });